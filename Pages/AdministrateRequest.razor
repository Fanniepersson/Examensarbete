@using Webshop.Models
@using Webshop.Models.Repositories

<div class="modal" id="editRequestModal" tabindex="-1" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title"></h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body row">
               @* <EditForm Model="@Request">
                    <input value="@Request.BookingId" type="hidden" />

                    <div class="form-group row">
                        <label for="firstname" class="col-sm-2 col-form-label">Firstname</label>
                        <div class="col-sm-10">
                            <InputText @bind-Value="SelectedRequest.Firstname" class="form-control" placeholder=SelectedOffice.OfficeName />
                        </div>
                    </div>

                    <div class="modal-footer mt-3">
                        <div class="col-md-1 d-flex justify-content-md-start">
                            <p><a class="tooltip-test" title="Radera kontor"><i data-bs-dismiss="modal" @onclick="(() => DismissRequest(SelectedRequest.BookingId))" class="fa-solid fa-trash"></i></a></p>
                        </div>

                        <div class="col d-flex justify-content-md-end">
                            <button type="submit" class="myBeigeButton" @onclick="(() => AcceptRequest(SelectedRequest))" data-bs-dismiss="modal">Spara & Stäng</button>
                        </div>
                    </div>
                </EditForm>*@
            </div>
        </div>
    </div>
</div>


@code {
    [Parameter]
    public BookingRequest SelectedRequest { get; set; }

    [Inject]
    IBookingRequestRepository? BookingRequestRepository { get; set; }

    public BookingRequest Request { get; set; } = new();



    private async Task DismissRequest(int bookingId)
    {
        try
        {
            await BookingRequestRepository.DismissBookingRequest(bookingId);

            //await OnSave.InvokeAsync();
        }
        catch (Exception)
        {
            throw;
        }
    }

    //private async Task AcceptRequest(SelectedRequest request)
    //{
    //    try
    //    {
    //        await BookingRequestRepository.AcceptBookingRequest(request);
    //        //await OnSave.InvokeAsync();
    //    }
    //    catch (Exception)
    //    {
    //        throw;
    //    }
    //}
}